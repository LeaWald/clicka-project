export class VendorService {
  getVendorSummary(vendorId: ID): VendorSummary {
    // שליפת כל ההוצאות המשויכות לספק
    // חישוב סכום כולל של כל ההוצאות  
    // ספירת מספר ההוצאות
    // שליפת תאריך ההוצאה האחרונה (אם קיימת)
    // חישוב סכום הוצאה ממוצע
    // ניתוח היסטוריית תשלומים:
    // כמה תשלומים בוצעו בזמן
    // כמה תשלומים בוצעו באיחור
    // חישוב מספר ימי תשלום ממוצעים
  }

  saveVendorProfile(input: VendorFormInput, isUpdate: boolean): Vendor {
    // אם מדובר בעדכון, נשתמש במזהה קיים, אחרת נייצר חדש
    // יצירת אובייקט ספק לפי הנתונים שהוזנו
    // החזרת אובייקט מוכן לשמירה במסד הנתונים
  }

  getVendorPaymentHistory(vendorId: ID): {
    onTimePayments: number;
    latePayments: number;
    averagePaymentDays: number;
  } {
    // שליפת כל ההוצאות והתשלומים של הספק מהמסד
    // שמירת משתנים לספירת תשלומים בזמן ומאחרים וסיכום ימי תשלום
    // מעבר על כל התשלומים כדי להעריך מתי בוצעו ביחס למועד התשלום
      // מציאת ההוצאה המתאימה לתשלום (בהנחה ש-payment.expenseId קיים)
      // חישוב הפרש הימים בין תאריך התשלום לתאריך המועד האחרון לתשלום
        // תשלום בזמן או מוקדם
        // תשלום מאוחר
    // חישוב ממוצע ימי תשלום (סכום הימים חלקי מספר התשלומים)
    // החזרת הסיכום
  }

  filterVendors(
    vendors: Vendor[],
    filters: {
      name?: string;
      category?: VendorCategory;
      status?: VendorStatus;
      taxId?: string;
    }
  ): Vendor[] {
    // סינון לפי שם (חלקי, לא רגיש לאותיות גדולות/קטנות)
    // סינון לפי קטגוריה
    // סינון לפי סטטוס (פעיל, מושעה, לא פעיל)
    // סינון לפי תעודת זהות/ח.פ (taxId)
    // נחזיר true רק אם כל התנאים מתקיימים
  }
}